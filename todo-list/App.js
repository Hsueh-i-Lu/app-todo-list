import React from "react";
import { StatusBar } from "expo-status-bar";
import {
  StyleSheet,
  Text,
  Button, //cannot add style in button, but Pressable can
  View,
  ScrollView, //use FlatList instead of ScrollView for dynamic/large data
  FlatList, //only load items that are visible to users
} from "react-native";
import { useState } from "react";
import ItemOutput from "./components/ItemOutput";
import ItemInput from "./components/ItemInput";

export default function App() {
  const [todoList, setTodoList] = useState([]); //init to-do list with empty array
  const [modalVisible, setModalVisible] = useState(false);

  function openInputModal() {
    setModalVisible(true);
  }

  function closeInputModal() {
    setModalVisible(false);
  }

  function addItem(item) {
    //item from getInputItem() in ItemInput component
    setTodoList((currentList) => [
      ...currentList,
      { text: item, key: new Date().getMilliseconds().toString() },
    ]); //"...todoList" has current to-do list
    //todoList is now an object with item and key
    closeInputModal(); //close modal after adding item
  }

  function deleteItem(id) {
    setTodoList((currentList) => {
      return currentList.filter((content) => content.key != id);
    });
  }

  return (
    <>
      <StatusBar style="auto" />
      <View style={styles.container}>
        <Button title="Add New Item" color="#976666" onPress={openInputModal} />
        {modalVisible && (
          <ItemInput
            visible={modalVisible}
            addItemFunc={addItem}
            closeModalFunc={closeInputModal}
          />
        )}
        <View style={styles.todolistContainer}>
          <Text style={styles.text}>To-do List ...</Text>
          <FlatList
            data={todoList}
            renderItem={(listData) => {
              //when the user scrolls, new items being seen will be loaded
              //listData parameter is generated from todoList by FlatList (can be named other)
              //listData.index - other properties generated by FlatList
              return (
                <ItemOutput
                  text={listData.item.text}
                  id={listData.item.key}
                  deleteItemFunc={deleteItem}
                />
              );
            }}
            alwaysBounceVertical={false}
          ></FlatList>
        </View>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    //if flex not defined, default is using all it needs (not whole screen space)
    flex: 1, //outer container takes all space since it is the only container
    paddingTop: 50,
    paddingHorizontal: 16,
  },
  todolistContainer: {
    //parent is container
    flex: 7, //child container takes 7/8
  },
  text: {
    margin: 8,
    fontSize: 20,
    fontWeight: "bold",
    color: "#3c3c3c",
  },
});
